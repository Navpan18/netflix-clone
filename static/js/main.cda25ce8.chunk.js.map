{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","original_title","original_name","then","url","urlParams","URLSearchParams","URL","search","console","log","catch","error","handleClick","backdrop_path","src","poster_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","fetchTopRated","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","originalName","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cda25ce8.chunk.js","sourcesContent":["import axios from \"axios\"\r\n\r\nconst instance = axios.create({\r\n    baseURL:'https://api.themoviedb.org/3'\r\n})\r\nexport default instance;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport \"./Row.css\";\r\nimport Youtube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer'\r\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\r\nimport 'react-lazy-load-image-component/src/effects/blur.css';\r\n\r\nconst baseurl = \"http://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n  useEffect(() => {\r\n    //you can't use async function inside use effect so you to make an internal function and call it\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // axios.get(fetchUrl) -> https://api.themoviedb.org/3{fetchUrl}\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]); // the variable taken outside of useffect must be added here\r\n  \r\n  const opts = {\r\n    height : \"390\",\r\n    width : \"100%\",\r\n    playerVars:{\r\n      autoplay : 1\r\n    }\r\n  }\r\n  const handleClick = (movie)=>{\r\n    if(trailerUrl){\r\n      setTrailerUrl('');\r\n    }else{\r\n      movieTrailer(movie?.name || movie?.original_title || movie?.original_name || \"\")\r\n      .then((url)=>{\r\n          const urlParams = new URLSearchParams( new URL(url).search);\r\n          setTrailerUrl(urlParams.get('v'));\r\n          console.log(movie.name);\r\n          console.log(url);\r\n        }\r\n      ).catch((error)=>console.log(error))\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"row\">\r\n      {/* title */}\r\n      <h2>{title}</h2>\r\n      {/* container -> posters */}\r\n      <div className=\"row_posters\">\r\n        {movies.map((movie) => (\r\n          <LazyLoadImage\r\n            key={movie.id}\r\n            onClick={()=>handleClick(movie)}\r\n            className={`row_poster ${\r\n              movie.backdrop_path == null && \"row_bdp\"\r\n            } ${isLargeRow && \"row_posterLarge\"}`}\r\n            src={`${baseurl}${\r\n              isLargeRow\r\n                ? movie.poster_path\r\n                : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '731c0009ddf5073fbadf531460b803ca';\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/day?api_key=${API_KEY}`,\r\n    fetchNetflixOriginals : `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchActionMovies : `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies : `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies : `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies : `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries : `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n    fetchTopRated : `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`\r\n\r\n}\r\n\r\nexport default requests;","import React, { useEffect, useState } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests.js\";\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchTrending);\r\n            setMovie(\r\n                request.data.results[\r\n                    Math.floor(Math.random() * request.data.results.length - 1)\r\n                ]\r\n                );\r\n            }\r\n            fetchData();\r\n        }, []);\r\n        console.log(movie);\r\n        function truncate(str,n){\r\n            return str?.length>n?str.substr(0,n-1) + \"...\" :str;\r\n        }\r\n  return (\r\n    <header className=\"banner\"\r\n    style={{\r\n        backgroundSize:'cover',\r\n        backgroundImage:`url(\"http://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\r\n        backgroundPosition: 'center center'\r\n    }}>\r\n      <div className=\"banner_contents\">\r\n        {/* background image */}\r\n        {/* title */}\r\n        <h1 className='banner_title'>{movie?.title || movie?.name || movie?.originalName}</h1>\r\n        {/* div>2buttons */}\r\n        <div className=\"banner_buttons\">\r\n            <button className=\"banner_button\">Play</button>\r\n            <button className=\"banner_button\">My List</button>\r\n        </div>\r\n        {/* description */}\r\n        <h1 className=\"banner_desc\">{truncate(movie?.overview,150)}</h1>\r\n      </div>\r\n      <div className=\"banner--fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show,handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener('scroll',()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true)\r\n            }\r\n            else handleShow(false);\r\n        })\r\n        return ()=>{\r\n            window.removeEventListener('scroll')\r\n        }\r\n    }, [])\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://www.logo.wine/a/logo/Netflix/Netflix-Logo.wine.svg\"\r\n        alt=\"Netflix logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://cdn2.iconfinder.com/data/icons/avatars-99/62/avatar-370-456322-512.png\"\r\n        alt=\"Netflix Avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import './App.css';\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* navbar */}\n      <Nav />\n      {/* banner */}\n      <Banner/>\n      {/* Rows */}\n      <Row isLargeRow={true} title='Netflix Originals' fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title='Trending Now' fetchUrl={requests.fetchTrending} /> \n      <Row title='Top Rated' fetchUrl={requests.fetchTopRated} /> \n      <Row title='Action Movies' fetchUrl={requests.fetchActionMovies} /> \n      <Row title='Comedy Movies' fetchUrl={requests.fetchComedyMovies} /> \n      <Row title='Horror Movies' fetchUrl={requests.fetchHorrorMovies} /> \n      <Row title='Romance Movies' fetchUrl={requests.fetchRomanceMovies} /> \n      <Row title='Documentaries' fetchUrl={requests.fetchDocumentaries} /> \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}